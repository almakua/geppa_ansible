---

- name: Ensure python OpenSSL dependencies are installed.
  pip:
    name: pyOpenSSL
    state: present
  tags: ssl

- name: Ensure directory exists for local self-signed TLS certs.
  file:
    path: /etc/letsencrypt/live/{{ item }}
    state: directory
  with_items: "{{ selfsigned_hosts }}"
  notify: restart nginx
  tags: ssl

- name: Generate an OpenSSL private key.
  openssl_privatekey:
    path: /etc/letsencrypt/live/{{ item }}/privkey.pem
  with_items: "{{ selfsigned_hosts }}"
  notify: restart nginx
  tags: ssl

- name: Generate an OpenSSL CSR.
  openssl_csr:
    path: /etc/ssl/private/{{ item }}.csr
    privatekey_path: /etc/letsencrypt/live/{{ item }}/privkey.pem
    common_name: "{{ item }}"
  with_items: "{{ selfsigned_hosts }}"
  notify: restart nginx
  tags: ssl

- name: Generate a Self Signed OpenSSL certificate.
  openssl_certificate:
    path: /etc/letsencrypt/live/{{ item }}/fullchain.pem
    privatekey_path: /etc/letsencrypt/live/{{ item }}/privkey.pem
    csr_path: /etc/ssl/private/{{ item }}.csr
    provider: selfsigned
  with_items: "{{ selfsigned_hosts }}"
  notify: restart nginx
  tags: ssl

- name: install certbot
  apt:
    name: certbot
    update_cache: yes
  tags: letsencrypt

- name: check if stage
  stat: 
    path: /etc/varnish/stage.ansible.status
  register: stagestatus
  tags: letsencrypt

- name: execute certbot for the stage virtualhosts
  shell: "certbot certonly --nginx --noninteractive -d {{ item }}"
  with_items: "{{ letsencrypt_hosts }}"
  tags: letsencrypt
  when: stagestatus.stat.exists == true

- name: execute certbot for the prod virtualhosts
  shell: "certbot certonly --nginx --noninteractive -d {{ item }} -d www.{{ item }}"
  with_items: "{{ letsencrypt_hosts }}"
  tags: letsencrypt
  when: stagestatus.stat.exists == false

- name: Push SSL config for virtualhosts
  template:
    src: virtualhost.conf.j2
    dest: /etc/nginx/sites-available/reverse.{{ item.value.url }}.conf
  with_dict:
    - "{{ virtualhosts }}"
  notify: restart nginx
  tags: nginx
